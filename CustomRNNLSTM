class DiyLSTM(Layer):

    def __init__(self, units, **kwargs):
        self.units = units
        self.state_size = [units, units]
        super(DiyLSTM, self).__init__(**kwargs)

    def build(self, input_shape):
        self.w_xi = self.add_weight(name='w_xi',
                                    shape=(input_shape[0][-1], self.units), initializer='uniform')
        self.w_xf = self.add_weight(name='w_xf',
                                    shape=(input_shape[0][-1], self.units), initializer='uniform')
        self.w_xo = self.add_weight(name='w_xo',
                                    shape=(input_shape[0][-1], self.units), initializer='uniform')
        self.w_xc = self.add_weight(name='w_xc',
                                    shape=(input_shape[0][-1], self.units), initializer='uniform')
        
        self.w_di = self.add_weight(name='w_di',
                                    shape=(input_shape[1][-1], self.units), initializer='uniform')
        self.w_df = self.add_weight(name='w_df',
                                    shape=(input_shape[1][-1], self.units), initializer='uniform')
        self.w_do = self.add_weight(name='w_do',
                                    shape=(input_shape[1][-1], self.units), initializer='uniform')
        self.w_dc = self.add_weight(name='w_dc',
                                    shape=(input_shape[1][-1], self.units), initializer='uniform')
        
        self.w_hi = self.add_weight(name='w_hi',
                                    shape=(self.units, self.units), initializer='uniform')
        self.w_hf = self.add_weight(name='w_hf',
                                    shape=(self.units, self.units), initializer='uniform')
        self.w_ho = self.add_weight(name='w_ho',
                                    shape=(self.units, self.units), initializer='uniform')
        self.w_hc = self.add_weight(name='w_hc',
                                    shape=(self.units, self.units), initializer='uniform')
        self.b_i = self.add_weight(name='b_i',
                                    shape=(1, self.units), initializer='zeros')
        self.b_f = self.add_weight(name='b_f',
                                    shape=(1, self.units), initializer='zeros')
        self.b_o = self.add_weight(name='b_o',
                                    shape=(1, self.units), initializer='zeros')
        self.b_c = self.add_weight(name='b_c',
                                    shape=(1, self.units), initializer='zeros')

        self.built = True

    def call(self, inputs, states):
        h, c = states
        x=inputs[0]
        d=inputs[1]
        print(inputs)
        print(x)
        print(d)
        i = K.sigmoid(K.dot(x, self.w_xi) + K.dot(d, self.w_di) + K.dot(h, self.w_hi) + self.b_i)
        f = K.sigmoid(K.dot(x, self.w_xf) + K.dot(d, self.w_df) + K.dot(h, self.w_hf) + self.b_f)
        o = K.sigmoid(K.dot(x, self.w_xo) + K.dot(d, self.w_do) + K.dot(h, self.w_ho) + self.b_o)

        c_in = K.tanh(K.dot(x, self.w_xc) + K.dot(f, self.w_dc) + K.dot(h, self.w_hc) + self.b_c)
        c_n = f * c + i * c_in
        h_n = o * K.tanh(c_n)

        return h_n, [h_n, c_n]

    
class MyRNN(Layer):
    def __init__(self, cell,
                 **kwargs):
        super(MyRNN, self).__init__(**kwargs)
        self.cell = cell

    def compute_output_shape(self, input_shape):
        state_size = self.cell.state_size
        output_dim = state_size[0]
        output_shape = (input_shape[0], output_dim)
        return output_shape

    def compute_mask(self, inputs, mask):
        output_mask = None
        return output_mask

    def build(self, input_shape):
        batch_size = None
        step_input_shape1 = (input_shape[0][0],) + input_shape[0][2:]
        step_input_shape2 = (input_shape[1][0],) + input_shape[1][2:]
        self.cell.build([step_input_shape1, step_input_shape2])
        self.built = True

    def get_initial_state(self, inputs):
        initial_state1 = K.zeros_like(inputs[0])  # (samples, timesteps, input_dim)
        initial_state1 = K.sum(initial_state1, axis=(1, 2))  # (samples,)
        initial_state1 = K.expand_dims(initial_state1)  # (samples, 1)
        init_stat_1 = [K.tile(initial_state1, [1, dim]) for dim in self.cell.state_size]
    
        initial_state2 = K.zeros_like(inputs[1])  # (samples, timesteps, input_dim)
        initial_state2 = K.sum(initial_state2, axis=(1, 2))  # (samples,)
        initial_state2 = K.expand_dims(initial_state2)  # (samples, 1)
        init_stat_2 = [K.tile(initial_state2, [1, dim]) for dim in self.cell.state_size]
        return [init_stat_1, init_stat_2]
    
    def call(self,
             inputs,
             mask=None):
        initial_state = self.get_initial_state(inputs)
        mask = mask[0]
        input_shape = K.int_shape(inputs[0])
        timesteps = input_shape[1]
        kwargs = {}

        def step(inputs, states):
            return self.cell.call(inputs, states, **kwargs)

        last_output, outputs, states = K.rnn(step,
                                             inputs[0],
                                             initial_state,
                                             input_length=timesteps)
        return last_output  

cell = DiyLSTM(256)
lstm_def = MyRNN(cell)
